@namespace Phazor.Components
@using Phazor.Components.Tools
@using Phazor.Components.Models
@inherits PhazorComponent

<div style="@ComputedStyle" class="@ComputedClass">
    @ChildContent
</div>

@code {

    [Parameter]
    public bool Reversed { get; set; }

    [Parameter]
    public HorizontalDistribution Horizontal { get; set; } = HorizontalDistribution.Center;

    [Parameter]
    public VerticalAlignment Vertical { get; set; } = VerticalAlignment.Center;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void ConfigureStyle(CssStyleBuilder builder)
    {
        builder
            .Add("display", "flex")
            .AddWhen(Reversed, "flex-direction", "row-reversed", "row")
            .Add("justify-content", ToCssString(Horizontal))
            .Add("align-items", ToCssString(Vertical));
    }

    protected override void ConfigureClasses(CssClassBuilder builder)
    {
        builder.Add("phazor-hstack");
    }

    private static string ToCssString(HorizontalDistribution distribution)
    {
        return distribution switch
        {
            HorizontalDistribution.Left => "start",
            HorizontalDistribution.Center => "center",
            HorizontalDistribution.Right => "end",
            HorizontalDistribution.Around => "space-around",
            HorizontalDistribution.Between => "space-between",
            _ => throw new ArgumentOutOfRangeException(nameof(distribution), distribution, null),
        };
    }

    private static string ToCssString(VerticalAlignment alignment)
    {
        return alignment switch
        {
            VerticalAlignment.Top => "start",
            VerticalAlignment.Center => "center",
            VerticalAlignment.Bottom => "end",
            _ => throw new ArgumentOutOfRangeException(nameof(alignment), alignment, null),
        };
    }

}