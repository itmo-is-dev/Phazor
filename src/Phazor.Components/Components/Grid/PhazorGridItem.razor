@using Microsoft.Extensions.Logging
@using Phazor.Components.Extensions
@using Phazor.Components.Tools
@namespace Phazor.Components
@inject ILogger<PhazorGridItem> Logger

<CascadingValue Value="_position">
    <div style="@_styleFactory.Value" class="@_classFactory.Value">
        @ChildContent
    </div>
</CascadingValue>

@code {

    private readonly CssStyleFactory _styleFactory;
    private readonly CssClassFactory _classFactory;

    private int _version = 0;
    private PhazorGridPosition _position;

    public PhazorGridItem()
    {
        _styleFactory = new CssStyleFactory(BuildStyle);
        _classFactory = new CssClassFactory(BuildClass);
    }

    [Parameter]
    public int? MajorIndex { get; set; }

    [Parameter]
    public int? MinorIndex { get; set; }

    [Parameter]
    public int? MajorSpan { get; set; }

    [Parameter]
    public int? MinorSpan { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter]
    protected PhazorGridSectionController? SectionController { get; set; }

    [CascadingParameter]
    protected PhazorGridController? GridController { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetUpdatedValue(nameof(Style), Style, out _)
            || parameters.TryGetUpdatedValue(nameof(Class), Class, out _))
        {
            Invalidate();
        }

        bool gridControllerChanged = parameters.TryGetUpdatedValue(
            nameof(GridController),
            GridController,
            out _);

        bool sectionControllerChanged = parameters.TryGetUpdatedValue(
            nameof(SectionController),
            SectionController,
            out _);

        bool majorIndexChanged = parameters.TryGetUpdatedValue(
            nameof(MajorIndex),
            MajorIndex,
            out _);

        bool minorIndexChanged = parameters.TryGetUpdatedValue(
            nameof(MinorIndex),
            MinorIndex,
            out _);

        await base.SetParametersAsync(parameters);

        if ((gridControllerChanged || sectionControllerChanged || majorIndexChanged || minorIndexChanged) is false)
            return;

        if (MajorIndex is not null && MinorIndex is not null && GridController is not null)
        {
            _position = GridController.MakePosition(MajorIndex.Value, MinorIndex.Value, MajorSpan, MinorSpan);
            Invalidate();
        }
        else if (MajorIndex is null && MinorIndex is not null && SectionController is not null)
        {
            _position = SectionController.MakePosition(MinorIndex.Value, MajorSpan, MinorSpan);
            Invalidate();
        }
        else if (MajorIndex is not null && MinorIndex is null && GridController is not null)
        {
            PhazorGridSectionController controller = GridController.SectionAt(MajorIndex.Value);
            _position = controller.NextItem().MakePosition(MajorSpan, MinorSpan);
            Invalidate();
        }
        else if (MajorIndex is null && MinorIndex is null && SectionController is not null)
        {
            _position = SectionController.NextItem().MakePosition(MajorSpan, MinorSpan);
            Invalidate();
        }
        else if (MajorIndex is null && MinorIndex is null && GridController is not null)
        {
            PhazorGridSectionController controller = GridController.NextSection();
            _position = controller.NextItem().MakePosition(MajorSpan, MinorSpan);
            Invalidate();
        }
        else
        {
            Logger.LogError("Failed to compute PhazorGridItem position");
        }
    }

    private void Invalidate()
    {
        _version++;
        _styleFactory.Invalidate();
        _classFactory.Invalidate();
    }

    private CssStyleBuilder BuildStyle(CssStyleBuilder builder)
    {
        return builder
            .Add("grid-row", $"{_position.Row} / span {_position.RowSpan}")
            .Add("grid-column", $"{_position.Column} / span {_position.ColumnSpan}")
            .AddWhenNotNull(Style);
    }

    private CssClassBuilder BuildClass(CssClassBuilder builder)
    {
        return builder
            .AddWhenNotNull(Class)
            .Add($"phazor-grid-item-{_version}");
    }

}