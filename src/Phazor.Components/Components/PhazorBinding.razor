@using System.Reactive.Subjects
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@using Phazor.Components.Extensions
@using Phazor.Components.Tools
@namespace Phazor.Components
@typeparam T
@implements IDisposable
@inject IOptionsMonitor<PhazorComponentsOptions> Options
@inject ILogger<PhazorBinding<T>> Logger

@if (_subject is not null && ChildContent is not null)
{
    @ChildContent.Invoke(_subject)
}

@code {

    private SubjectBase<T>? _subject;

    [Parameter]
    public int? ReplaySize { get; set; }

    [Parameter]
    public RenderFragment<ISubject<T>>? ChildContent { get; set; }

    public void Dispose()
    {
        _subject?.Dispose();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetUpdatedValue(nameof(ReplaySize), ReplaySize, out var replaySize))
        {
            if (replaySize is > 0)
            {
                _subject = new ReplaySubject<T>(replaySize.Value);
            }
            else
            {
                _subject = new Subject<T>();
            }

            if (Options.CurrentValue.Trace)
            {
                Logger.LogInformation("Created subject = {Subject}", _subject.GetType());
                _subject = new LoggingSubjectWrapper<T>(Logger, _subject);
            }
        }
        
        return base.SetParametersAsync(parameters);
    }

}