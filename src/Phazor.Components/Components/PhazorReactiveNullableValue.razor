@namespace Phazor.Components
@using Microsoft.Extensions.Options
@using Phazor.Components.Tools
@using Microsoft.Extensions.Logging
@typeparam T
@inject IOptionsMonitor<PhazorComponentsOptions> Options
@inject ILogger<PhazorReactiveNullableValue<T>> Logger

@if (ChildContent is not null)
{
    @ChildContent.Invoke(_value)
}

@code {

    private IDisposable? _disposable;

    private T? _value;

    [Parameter]
    public IObservable<T>? Value { get; set; }

    [Parameter]
    public RenderFragment<T?>? ChildContent { get; set; }

    [Parameter]
    public EventCallback<T>? ValueChanged { get; set; }

    protected override void OnParametersSet()
    {
        _disposable?.Dispose();

        var options = Options.CurrentValue;

        _disposable = Value?.Subscribe(x =>
        {
            if (options.Trace)
            {
                Logger.LogInformation(
                    "PhazorReactiveNullableValue<{Type}> received value = {Value}",
                    typeof(T).Name,
                    x);
            }
            
            _value = x;

            ValueChanged?.InvokeAsync(x);

            StateHasChanged();
        });
    }

}