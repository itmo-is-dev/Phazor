@namespace Phazor.Components
@using Phazor.Components.Extensions
@implements IDisposable
@typeparam T

@if (_elements is not null && ChildContent is not null)
{
    @foreach (var element in _elements)
    {
        @ChildContent.Invoke(element)
    }
}

@code {

    private IDisposable? _elementsSubscription;
    private IEnumerable<T>? _elements;

    [Parameter]
    public IObservable<IEnumerable<T>>? Elements { get; set; }

    [Parameter]
    public RenderFragment<T>? ChildContent { get; set; }

    public void Dispose()
    {
        _elementsSubscription?.Dispose();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetUpdatedValue(nameof(Elements), Elements, out IObservable<IEnumerable<T>>? elements))
        {
            _elementsSubscription?.Dispose();

            _elementsSubscription = elements?.Subscribe(x =>
            {
                _elements = x;
                StateHasChanged();
            });
        }

        return base.SetParametersAsync(parameters);
    }

}