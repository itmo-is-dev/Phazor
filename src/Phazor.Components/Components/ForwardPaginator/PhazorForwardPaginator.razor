@using Microsoft.JSInterop
@using Phazor.Components.Extensions
@namespace Phazor.Components
@typeparam TElement
@typeparam TState
@implements IDisposable
@inject IJSRuntime Js

<div style="width: 100%; height: 100%; overflow: scroll" id="@_contentId">

    @ChildContent?.Invoke(_elements)

    @if (_isLoading)
    {
        @Loader
    }

</div>

@code {

    private readonly DotNetObjectReference<PhazorForwardPaginator<TElement, TState>> _reference;
    private readonly string _contentId;

    private CancellationTokenSource _cts;

    private List<TElement> _elements;
    private TState? _state;

    private bool _isLoading;

    public PhazorForwardPaginator()
    {
        _reference = DotNetObjectReference.Create(this);
        _contentId = Guid.NewGuid().ToString();
        _cts = new CancellationTokenSource();
        _elements = new List<TElement>();
    }

    [Parameter]
    public IForwardPaginatorController<TElement, TState>? Controller { get; set; }

    [Parameter]
    public RenderFragment<IEnumerable<TElement>>? ChildContent { get; set; }

    [Parameter]
    public RenderFragment? Loader { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetUpdatedValue(nameof(Controller), Controller, out _))
        {
            _state = default;
            _elements.Clear();

            _cts.Cancel();
            _cts.Dispose();

            _cts = new CancellationTokenSource();
        }

        await base.SetParametersAsync(parameters);
    }

    public void Dispose()
    {
        _reference.Dispose();

        if (_cts.IsCancellationRequested is false)
            _cts.Cancel();

        _cts.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("Phazor.subscribeOnScrollFinished", _contentId, _reference);
        }

        if (_isLoading is false 
            && (_state is null || Controller?.ShouldLoadNextPage(_state) is true)
            && await Js.InvokeAsync<bool>("Phazor.isContentFillingParent", _contentId) is false)
        {
            OnScrollFinished();
        }
    }

    [JSInvokable]
    public async void OnScrollFinished()
    {
        if (Controller is null || _isLoading)
            return;

        if (_state is null)
        {
            _state = Controller.CreateState();
        }
        else if (Controller.ShouldLoadNextPage(_state) is false)
        {
            return;
        }

        _isLoading = true;
        StateHasChanged();

        ForwardPageLoadResult<TElement, TState> result = await Controller.LoadPageAsync(_state, _cts.Token);

        _isLoading = false;

        _elements.AddRange(result.Elements);
        _state = result.State;

        StateHasChanged();
    }

}