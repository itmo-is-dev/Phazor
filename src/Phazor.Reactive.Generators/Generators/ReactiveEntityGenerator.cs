using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Phazor.Reactive.Generators.Models;
using Phazor.Reactive.Generators.Models.Effects;
using Phazor.Reactive.Generators.Models.Entities;
using Phazor.Reactive.Generators.Models.Events;
using Phazor.Reactive.Generators.Receivers;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Phazor.Reactive.Generators.Generators;

[Generator]
public class ReactiveEntityGenerator : ISourceGenerator
{
    private static readonly SyntaxToken NamespaceCommentToken = Token(
        TriviaList(
            Comment(Constants.AutoGeneratedComment),
            Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))),
        SyntaxKind.NamespaceKeyword,
        TriviaList());

    public void Initialize(GeneratorInitializationContext context)
        => context.RegisterForSyntaxNotifications(() => new ReactiveEntitySyntaxReceiver());

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxContextReceiver is not ReactiveEntitySyntaxReceiver receiver)
            return;

        ReactiveEntityContext[] entityContexts = receiver.Entities
            .Select(x => new ReactiveEntityContext(x, new EntityFactory(x)))
            .ToArray();

        foreach (ReactiveEntityContext entityContext in entityContexts)
        {
            if (context.CancellationToken.IsCancellationRequested)
                return;

            GenerateEntity(entityContext.Entity, context);
            GenerateEntityFactory(context, entityContext.Factory, entityContexts);
            GenerateEntityFactoryAlias(entityContext.Factory, context);
        }

        var handlers = new List<ReactiveEventHandler>();

        foreach (ReactiveEvent evt in receiver.Events)
        {
            if (context.CancellationToken.IsCancellationRequested)
                return;

            ReactiveEventHandler? handler = GenerateEventHandler(evt, receiver.Entities, context);

            if (handler is not null)
                handlers.Add(handler);
        }

        var registration = new RegistrationExtension(
            context.Compilation.Assembly,
            Factories: receiver.Entities.Select(x => new EntityFactory(x)).ToArray(),
            EventHandlers: handlers);

        GenerateRegistration(registration, context);
    }

    private static void GenerateEntity(ReactiveEntity entity, GeneratorExecutionContext context)
    {
        TypeDeclarationSyntax typeSyntax = entity.ToSyntax(context);
        string namespaceName = entity.InterfaceType.ContainingNamespace.ToDisplayString();
        IdentifierNameSyntax namespaceIdentifier = IdentifierName(namespaceName);

        NamespaceDeclarationSyntax namespaceSyntax = NamespaceDeclaration(namespaceIdentifier)
            .AddMembers(typeSyntax)
            .WithNamespaceKeyword(NamespaceCommentToken);

        CompilationUnitSyntax syntax = CompilationUnit().AddMembers(namespaceSyntax);
        string text = syntax.NormalizeWhitespace(eol: "\n").ToFullString();
        string fileName = $"{entity.FullyQualifiedName}.cs";

        context.AddSource(fileName, text);
    }

    private static void GenerateEntityFactory(
        GeneratorExecutionContext context,
        EntityFactory factory,
        IReadOnlyCollection<ReactiveEntityContext> entityContexts)
    {
        ClassDeclarationSyntax typeSyntax = factory.ToFactorySyntax(context, entityContexts);

        IdentifierNameSyntax namespaceIdentifier = IdentifierName(
            factory.Entity.InterfaceType.ContainingNamespace.ToDisplayString());

        NamespaceDeclarationSyntax namespaceSyntax = NamespaceDeclaration(namespaceIdentifier)
            .AddMembers(typeSyntax)
            .WithNamespaceKeyword(NamespaceCommentToken);

        CompilationUnitSyntax syntax = CompilationUnit().AddMembers(namespaceSyntax);
        string text = syntax.NormalizeWhitespace(eol: "\n").ToFullString();
        string fileName = $"{factory.FullyQualifiedName}.cs";

        context.AddSource(fileName, text);
    }

    private static void GenerateEntityFactoryAlias(EntityFactory factory, GeneratorExecutionContext context)
    {
        InterfaceDeclarationSyntax typeSyntax = factory.ToFactoryAliasSyntax();

        IdentifierNameSyntax namespaceIdentifier = IdentifierName(
            factory.Entity.InterfaceType.ContainingNamespace.ToDisplayString());

        NamespaceDeclarationSyntax namespaceSyntax = NamespaceDeclaration(namespaceIdentifier)
            .AddMembers(typeSyntax)
            .WithNamespaceKeyword(NamespaceCommentToken);

        CompilationUnitSyntax syntax = CompilationUnit().AddMembers(namespaceSyntax);
        string text = syntax.NormalizeWhitespace(eol: "\n").ToFullString();
        string fileName = $"{factory.AliasFullyQualifiedName}.cs";

        context.AddSource(fileName, text);
    }

    private static ReactiveEventHandler? GenerateEventHandler(
        ReactiveEvent evt,
        IEnumerable<ReactiveEntity> entities,
        GeneratorExecutionContext context)
    {
        if (evt.Effects.Count is 0)
            return null;

        var handler = new ReactiveEventHandler(evt);

        ClassDeclarationSyntax typeSyntax = handler.ToSyntax(entities);
        IdentifierNameSyntax namespaceIdentifier = IdentifierName(evt.EventType.ContainingNamespace.ToDisplayString());

        NamespaceDeclarationSyntax namespaceSyntax = NamespaceDeclaration(namespaceIdentifier)
            .AddMembers(typeSyntax)
            .WithNamespaceKeyword(NamespaceCommentToken);

        CompilationUnitSyntax syntax = CompilationUnit().AddMembers(namespaceSyntax);
        string text = syntax.NormalizeWhitespace(eol: "\n").ToFullString();
        string fileName = $"{handler.FullyQualifiedName}.cs";

        context.AddSource(fileName, text);

        return handler;
    }

    private static void GenerateRegistration(RegistrationExtension registration, GeneratorExecutionContext context)
    {
        if (registration.TryGetSyntax(out ClassDeclarationSyntax? typeSyntax) is false)
            return;

        IdentifierNameSyntax namespaceIdentifier = IdentifierName(context.Compilation.Assembly.Name);

        NamespaceDeclarationSyntax namespaceSyntax = NamespaceDeclaration(namespaceIdentifier)
            .AddMembers(typeSyntax)
            .WithNamespaceKeyword(NamespaceCommentToken);

        CompilationUnitSyntax syntax = CompilationUnit().AddMembers(namespaceSyntax);
        string text = syntax.NormalizeWhitespace(eol: "\n").ToFullString();
        string fileName = $"{registration.FullyQualifiedName}.cs";

        context.AddSource(fileName, text);
    }
}